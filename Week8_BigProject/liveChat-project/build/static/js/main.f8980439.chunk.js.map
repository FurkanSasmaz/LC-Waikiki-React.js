{"version":3,"sources":["actions/constants.js","actions/auth.actions.js","components/Header/index.js","components/Layout/index.js","containers/HomePage/index.js","actions/user.actions.js","components/UI/Card/index.js","containers/LoginPage/index.js","containers/RegisterPage/index.js","components/PrivateRoute.js","App.js","serviceWorker.js","reducers/auth.reducer.js","reducers/user.reducer.js","reducers/index.js","store/index.js","index.js"],"names":["authConstanst","userConstants","Header","props","auth","useSelector","state","dispatch","useDispatch","className","style","display","authenticated","to","margin","color","fontWeight","firstName","lastName","onClick","uid","type","firestore","collection","doc","update","isOnline","then","signOut","localStorage","clear","catch","error","console","log","payload","Layout","children","User","user","src","alt","flex","justifyContent","HomePage","unsubscribe","useState","chatStarted","setChatStarted","chatUser","setChatUser","message","setMessage","userUid","setUserUid","useEffect","db","onSnapshot","querySnapshot","users","forEach","data","push","f","initChat","where","uid_1","uid_2","orderBy","conversations","user_uid_1","user_uid_2","getRealtimeConversations","length","map","key","con","textAlign","value","onChange","e","target","placeholder","msgObj","add","isView","createdAt","Date","updateMessage","Card","LoginPage","email","setEmail","password","setPassword","onSubmit","preventDefault","signInWithEmailAndPassword","name","displayName","split","loggedInUser","setItem","JSON","stringify","alert","RegisterPage","setFirstName","setLastName","createUserWithEmailAndPassword","currentUser","updateProfile","set","signup","PrivateRoute","Component","component","rest","getItem","parse","App","path","exact","Boolean","window","location","hostname","match","initState","authenticating","intiState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f8980439.chunk.js","sourcesContent":["export const authConstanst = {\n    USER_LOGIN: 'USER_LOGIN',\n    USER_LOGOUT: 'USER_LOGOUT'\n}\n\nexport const userConstants = {\n    GET_REALTIME_USERS: 'GET_REALTIME_USERS',\n    GET_REALTIME_MESSAGES: 'GET_REALTIME_MESSAGES'\n}","import { auth, firestore } from 'firebase';\nimport { authConstanst } from './constants';\nimport { getRealtimeUsers } from './user.actions';\n\nexport const signup = (user) => {\n\n    return async (dispatch) => {\n\n        const db = firestore();\n\n        dispatch({type: `${authConstanst.USER_LOGIN}_REQUEST`});\n\n        auth()\n        .createUserWithEmailAndPassword(user.email, user.password)\n        .then(data => {\n            console.log(data);\n            const currentUser = auth().currentUser;\n            const name = `${user.firstName} ${user.lastName}`;\n            currentUser.updateProfile({\n                displayName: name\n            })\n            .then(() => {\n                //if you are here means it is updated successfully\n                db.collection('users')\n                .doc(data.user.uid)\n                .set({\n                    firstName: user.firstName,\n                    lastName: user.lastName,\n                    uid: data.user.uid,\n                    createdAt: new Date(),\n                    isOnline: true\n                })\n                .then(() => {\n                    //succeful\n                    const loggedInUser = {\n                        firstName: user.firstName,\n                        lastName: user.lastName,\n                        uid: data.user.uid,\n                        email: user.email\n                    }\n                    localStorage.setItem('user', JSON.stringify(loggedInUser));\n                    console.log('User logged in successfully...!');\n                    dispatch({\n                        type: `${authConstanst.USER_LOGIN}_SUCCESS`,\n                        payload: { user: loggedInUser }\n                    })\n                })\n                .catch(error => {\n                    console.log(error);\n                    dispatch({ \n                        type: `${authConstanst.USER_LOGIN}_FAILURE`,\n                        payload: { error }\n                      });\n                });\n            });\n        })\n        .catch(error => {\n            console.log(error);\n        })\n\n\n    }\n\n\n}\n\nexport const signin = (user) => {\n    return async dispatch => {\n\n        dispatch({ type: `${authConstanst.USER_LOGIN}_REQUEST` });\n        auth()\n        .signInWithEmailAndPassword(user.email, user.password)\n        .then((data) => {\n            console.log(data);\n\n\n            const db = firestore();\n            db.collection('users')\n            .doc(data.user.uid)\n            .update({\n                isOnline: true\n            })\n            .then(() => {\n                const name = data.user.displayName.split(\" \");\n                const firstName = name[0];\n                const lastName = name[1];\n\n                const loggedInUser = {\n                    firstName,\n                    lastName,\n                    uid: data.user.uid,\n                    email: data.user.email\n                }\n\n                localStorage.setItem('user', JSON.stringify(loggedInUser));\n\n                dispatch({\n                    type: `${authConstanst.USER_LOGIN}_SUCCESS`,\n                    payload: { user: loggedInUser }\n                });\n            })\n            .catch(error => {\n                console.log(error)\n            })\n\n            \n\n\n\n        })\n        .catch(error => {\n            console.log(error);\n            dispatch({\n                type: `${authConstanst.USER_LOGIN}_FAILURE`,\n                payload: { error }\n            })\n        })\n        \n\n\n    }\n}\n\nexport const isLoggedInUser = () => {\n    return async dispatch => {\n\n        const user = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null;\n\n        if(user){\n            dispatch({\n                type: `${authConstanst.USER_LOGIN}_SUCCESS`,\n                payload: { user }\n            });\n        }else{\n            dispatch({\n                type: `${authConstanst.USER_LOGIN}_FAILURE`,\n                payload: { error: 'Login again please' }\n            });\n        }\n\n\n    }\n}\n\nexport const logout = (uid) => {\n    return async dispatch => {\n        dispatch({ type: `${authConstanst.USER_LOGOUT}_REQUEST` });\n        //Now lets logout user\n\n        const db = firestore();\n        db.collection('users')\n        .doc(uid)\n        .update({\n            isOnline: false\n        })\n        .then(() => {\n\n            auth()\n            .signOut()\n            .then(() => {\n                //successfully\n                localStorage.clear();\n                dispatch({type: `${authConstanst.USER_LOGOUT}_SUCCESS`});\n            })\n            .catch(error => {\n                console.log(error);\n                dispatch({ type: `${authConstanst.USER_LOGOUT}_FAILURE`, payload: { error } })\n            })\n\n        })\n        .catch(error => {\n            console.log(error);\n        })\n\n        \n\n\n    }\n}\n\n","import React from 'react';\nimport { NavLink, Link } from 'react-router-dom';\nimport './style.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { logout } from '../../actions';\n\n/**\n* @author\n* @function Header\n**/\n\nconst Header = (props) => {\n\n  const auth = useSelector(state => state.auth);\n  const dispatch = useDispatch();\n\n  // const logout = () => {\n  //   dispatch(logout())\n  // }\n\n  return(\n    <header className=\"header\">\n        <div style={{display: 'flex'}}>\n          <div className=\"logo\">Web Messenger</div>\n            \n            {\n              !auth.authenticated ? \n              <ul className=\"leftMenu\">\n                <li><NavLink to={'/login'}>Login</NavLink></li>\n                <li><NavLink to={'/signup'}>Sign up</NavLink></li>\n              </ul> : null\n            }\n              \n\n            \n        </div>\n          <div style={{margin: '20px 0', color: '#fff', fontWeight: 'bold'}}>\n            {auth.authenticated ? `Hi ${auth.firstName} ${auth.lastName}` : ''}\n          </div>\n        <ul className=\"menu\">\n\n            {\n              auth.authenticated ?\n              <li>\n                <Link to={'#'} onClick={() => {\n                  dispatch(logout(auth.uid))\n                }}>Logout</Link>\n            </li> : null\n            }\n          \n            \n             \n        </ul>\n    </header>\n   )\n\n }\n\nexport default Header","import React from 'react';\nimport Header from '../Header';\n\n/**\n* @author\n* @function Layout\n**/\n\nconst Layout = (props) => {\n  return(\n    <div style={{\n\n    }}>\n        <Header />\n        {props.children}\n    </div>\n   )\n\n }\n\nexport default Layout\n","import React, { useEffect, useState } from \"react\";\nimport \"./style.css\";\nimport Layout from \"../../components/Layout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getRealtimeUsers,\n  updateMessage,\n  getRealtimeConversations,\n} from \"../../actions\";\n\nconst User = (props) => {\n  const { user, onClick } = props;\n\n  return (\n    <div onClick={() => onClick(user)} className=\"displayName\">\n      <div className=\"displayPic\">\n        <img\n          src=\"https://i.pinimg.com/originals/be/ac/96/beac96b8e13d2198fd4bb1d5ef56cdcf.jpg\"\n          alt=\"\"\n        />\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          flex: 1,\n          justifyContent: \"space-between\",\n          margin: \"0 10px\",\n        }}\n      >\n        <span style={{ fontWeight: 500 }}>\n          {user.firstName} {user.lastName}\n        </span>\n        <span\n          className={user.isOnline ? `onlineStatus` : `onlineStatus off`}\n        ></span>\n      </div>\n    </div>\n  );\n};\n\nconst HomePage = (props) => {\n  const dispatch = useDispatch();\n  const auth = useSelector((state) => state.auth);\n  const user = useSelector((state) => state.user);\n  const [chatStarted, setChatStarted] = useState(false);\n  const [chatUser, setChatUser] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [userUid, setUserUid] = useState(null);\n  let unsubscribe;\n\n  useEffect(() => {\n    unsubscribe = dispatch(getRealtimeUsers(auth.uid))\n      .then((unsubscribe) => {\n        return unsubscribe;\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  //console.log(user);\n\n  //componentWillUnmount\n  useEffect(() => {\n    return () => {\n      //cleanup\n      unsubscribe.then((f) => f()).catch((error) => console.log(error));\n    };\n  }, []);\n\n  const initChat = (user) => {\n    setChatStarted(true);\n    setChatUser(`${user.firstName} ${user.lastName}`);\n    setUserUid(user.uid);\n\n    console.log(user);\n\n    dispatch(getRealtimeConversations({ uid_1: auth.uid, uid_2: user.uid }));\n  };\n\n  const submitMessage = (e) => {\n    const msgObj = {\n      user_uid_1: auth.uid,\n      user_uid_2: userUid,\n      message,\n    };\n\n    if (message !== \"\") {\n      dispatch(updateMessage(msgObj)).then(() => {\n        setMessage(\"\");\n      });\n    }\n\n    //console.log(msgObj);\n  };\n\n  return (\n    <Layout>\n      <section className=\"container\">\n        <div className=\"listOfUsers\">\n          {user.users.length > 0\n            ? user.users.map((user) => {\n                return <User onClick={initChat} key={user.uid} user={user} />;\n              })\n            : null}\n        </div>\n\n        <div className=\"chatArea\">\n          <div className=\"chatHeader\">{chatStarted ? chatUser : \"\"}</div>\n          <div className=\"messageSections\">\n            {chatStarted\n              ? user.conversations.map((con) => (\n                  <div\n                    style={{\n                      textAlign: con.user_uid_1 === auth.uid ? \"right\" : \"left\",\n                    }}\n                  >\n                    <p className=\"messageStyle\">{con.message}</p>\n                  </div>\n                ))\n              : null}\n          </div>\n          {chatStarted ? (\n            <div className=\"chatControls\">\n              <textarea\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                placeholder=\"Write Message\"\n              />\n              <button onClick={submitMessage}>Send</button>\n            </div>\n          ) : null}\n        </div>\n      </section>\n    </Layout>\n  );\n};\n\nexport default HomePage;\n","import { userConstants } from \"./constants\";\nimport { firestore } from \"firebase\";\n\nexport const getRealtimeUsers = (uid) => {\n  //console.log('uid', uid)\n\n  return async (dispatch) => {\n    dispatch({ type: `${userConstants.GET_REALTIME_USERS}_REQUEST` });\n\n    const db = firestore();\n    const unsubscribe = db\n      .collection(\"users\")\n      //.where(\"uid\", \"!=\", uid)\n      .onSnapshot((querySnapshot) => {\n        const users = [];\n        querySnapshot.forEach(function (doc) {\n          if (doc.data().uid !== uid) {\n            users.push(doc.data());\n          }\n        });\n        //console.log(users);\n\n        dispatch({\n          type: `${userConstants.GET_REALTIME_USERS}_SUCCESS`,\n          payload: { users },\n        });\n      });\n\n    return unsubscribe;\n  };\n};\n\nexport const updateMessage = (msgObj) => {\n  return async (dispatch) => {\n    const db = firestore();\n    db.collection(\"conversations\")\n      .add({\n        ...msgObj,\n        isView: false,\n        createdAt: new Date(),\n      })\n      .then((data) => {\n        console.log(data);\n        //success\n        // dispatch({\n        //     type: userConstants.GET_REALTIME_MESSAGES,\n        // })\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n};\n\nexport const getRealtimeConversations = (user) => {\n  return async (dispatch) => {\n    const db = firestore();\n    db.collection(\"conversations\")\n      .where(\"user_uid_1\", \"in\", [user.uid_1, user.uid_2])\n      .orderBy(\"createdAt\", \"asc\")\n      .onSnapshot((querySnapshot) => {\n        const conversations = [];\n\n        querySnapshot.forEach((doc) => {\n          if (\n            (doc.data().user_uid_1 === user.uid_1 &&\n              doc.data().user_uid_2 === user.uid_2) ||\n            (doc.data().user_uid_1 === user.uid_2 &&\n              doc.data().user_uid_2 === user.uid_1)\n          ) {\n            conversations.push(doc.data());\n          }\n\n          // if(conversations.length > 0){\n\n          // }else{\n          //     dispatch({\n          //         type: `${userConstants.GET_REALTIME_MESSAGES}_FAILURE`,\n          //         payload: { conversations }\n          //     })\n          // }\n        });\n\n        dispatch({\n          type: userConstants.GET_REALTIME_MESSAGES,\n          payload: { conversations },\n        });\n\n        console.log(conversations);\n      });\n    //user_uid_1 == 'myid' and user_uid_2 = 'yourId' OR user_uid_1 = 'yourId' and user_uid_2 = 'myId'\n  };\n};\n","import React from 'react';\nimport './style.css';\n\n/**\n* @author\n* @function Card\n**/\n\nconst Card = (props) => {\n  return(\n    <div  className=\"card\">\n        {props.children}\n    </div>\n   )\n\n }\n\nexport default Card\n","import React, { useState, useEffect } from \"react\";\nimport Layout from \"../../components/Layout\";\nimport Card from \"../../components/UI/Card\";\nimport { signin } from \"../../actions\";\nimport \"./style.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n\n/**\n * @author\n * @function LoginPage\n **/\n\nconst LoginPage = (props) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const dispatch = useDispatch();\n  const auth = useSelector((state) => state.auth);\n\n  // useEffect(() => {\n  //   if(!auth.authenticated){\n  //     dispatch(isLoggedInUser())\n  //   }\n  // }, []);\n\n  const userLogin = (e) => {\n    e.preventDefault();\n\n    if (email === \"\") {\n      alert(\"Email is required\");\n      return;\n    }\n    if (password === \"\") {\n      alert(\"Password is required\");\n      return;\n    }\n\n    dispatch(signin({ email, password }));\n  };\n\n  if (auth.authenticated) {\n    return <Redirect to={`/`} />;\n  }\n\n  return (\n    <Layout>\n      <div className=\"loginContainer\">\n        <Card>\n          <form onSubmit={userLogin}>\n            <input\n              name=\"email\"\n              type=\"text\"\n              className={\n                \"rounded-md appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-purple-500 focus:border-purple-500 focus:z-10 sm:text-sm\"\n              }\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Email\"\n            />\n\n            <input\n              name=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Password\"\n            />\n\n            <div>\n              <button>Login</button>\n            </div>\n          </form>\n        </Card>\n      </div>\n    </Layout>\n  );\n};\n\nexport default LoginPage;\n","import React, { useState } from \"react\";\nimport Layout from \"../../components/Layout\";\nimport Card from \"../../components/UI/Card\";\nimport { signup } from \"../../actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n/**\n * @author\n * @function RegisterPage\n **/\n\nconst RegisterPage = (props) => {\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const dispatch = useDispatch();\n  const auth = useSelector((state) => state.auth);\n\n  const registerUser = (e) => {\n    e.preventDefault();\n\n    const user = {\n      firstName,\n      lastName,\n      email,\n      password,\n    };\n\n    dispatch(signup(user));\n  };\n\n  if (auth.authenticated) {\n    return <Redirect to={`/`} />;\n  }\n\n  return (\n    <Layout>\n      <div className=\"registerContainer\">\n        <Card>\n          <form onSubmit={registerUser}>\n            <h3 className=\"text-inherit\">Sign up</h3>\n\n            <input\n              className={\n                \"rounded-md appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-purple-500 focus:border-purple-500 focus:z-10 sm:text-sm\"\n              }\n              name=\"firstName\"\n              type=\"text\"\n              value={firstName}\n              onChange={(e) => setFirstName(e.target.value)}\n              placeholder=\"First Name\"\n            />\n\n            <input\n              name=\"lastName\"\n              type=\"text\"\n              value={lastName}\n              onChange={(e) => setLastName(e.target.value)}\n              placeholder=\"Last Name\"\n            />\n\n            <input\n              name=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Email\"\n            />\n\n            <input\n              name=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Password\"\n            />\n\n            <div>\n              <button>Sign up</button>\n            </div>\n          </form>\n        </Card>\n      </div>\n    </Layout>\n  );\n};\n\nexport default RegisterPage;\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\n/**\n* @author\n* @function PrivateRoute\n**/\n\nconst PrivateRoute = ({component: Component, ...rest}) => {\n  return(\n    <Route {...rest} component={(props) => {\n        const user = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null;\n\n        if(user){\n            return <Component {...props} />\n        }else{\n            return <Redirect to={`/login`} />\n        }\n\n    }} />\n   )\n\n }\n\nexport default PrivateRoute","import React, { useEffect } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"./index.css\";\nimport HomePage from \"./containers/HomePage\";\nimport LoginPage from \"./containers/LoginPage\";\nimport RegisterPage from \"./containers/RegisterPage\";\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { isLoggedInUser } from \"./actions\";\n\nfunction App() {\n  const auth = useSelector((state) => state.auth);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!auth.authenticated) {\n      dispatch(isLoggedInUser());\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        {/* only logged in user can access this home route */}\n        <PrivateRoute path=\"/\" exact component={HomePage} />\n\n        <Route path=\"/login\" component={LoginPage} />\n        <Route path=\"/signup\" component={RegisterPage} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { authConstanst } from \"../actions/constants\"\n\nconst initState = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    authenticating: false,\n    authenticated: false,\n    error: null\n}\n\nexport default (state = initState, action) => {\n\n    console.log(action);\n\n    switch(action.type){\n\n        case `${authConstanst.USER_LOGIN}_REQUEST`:\n            state = {\n                ...state,\n                authenticating: true\n            }\n            break;\n        case `${authConstanst.USER_LOGIN}_SUCCESS`:\n            state = {\n                ...state,\n                ...action.payload.user,\n                authenticated: true,\n                authenticating: false\n            }\n            break;\n        case `${authConstanst.USER_LOGIN}_FAILURE`:\n            state = {\n                ...state,\n                authenticated: false,\n                authenticating: false,\n                error: action.payload.error\n            }\n            break;\n        case `${authConstanst.USER_LOGOUT}_REQUEST`:\n            break;\n        case `${authConstanst.USER_LOGOUT}_SUCCESS`:\n            state = {\n                ...initState\n            }\n            break;\n        case `${authConstanst.USER_LOGOUT}_FAILURE`:\n            state = {\n                ...state,\n                error: action.payload.error\n            }\n            break;\n\n    }\n\n\n    return state;\n}","import { userConstants } from \"../actions/constants\"\n\nconst intiState = {\n    users: [],\n    conversations: []\n}\n\nexport default (state = intiState, action) => {\n\n    switch(action.type){\n        case `${userConstants.GET_REALTIME_USERS}_REQUEST`:\n            break;\n        case `${userConstants.GET_REALTIME_USERS}_SUCCESS`:\n            state = {\n                ...state,\n                users: action.payload.users\n            }\n            break;\n        case userConstants.GET_REALTIME_MESSAGES:\n            state = {\n                ...state,\n                conversations: action.payload.conversations\n            }\n            break;\n        case `${userConstants.GET_REALTIME_MESSAGES}_FAILURE`:\n            state = {\n                ...state,\n                conversations: []\n            }\n            break;\n        \n    }\n\n\n    return state;\n\n}","import { combineReducers } from \"redux\";\nimport authReducer from './auth.reducer';\nimport userReducer from './user.reducer';\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    user: userReducer,\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport rootReducer from '../reducers';\nimport thunk from 'redux-thunk';\n\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\n\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport firebase from \"firebase\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAf4hX6aCYgtP-Q54AaJKgX7i6tu-epTvg\",\n  authDomain: \"livechat-ba1a4.firebaseapp.com\",\n  projectId: \"livechat-ba1a4\",\n  storageBucket: \"livechat-ba1a4.appspot.com\",\n  messagingSenderId: \"219724807706\",\n  appId: \"1:219724807706:web:8e3768c057fbe47b759ba3\",\n  measurementId: \"G-MQXTLDWRF4\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nwindow.store = store;\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}